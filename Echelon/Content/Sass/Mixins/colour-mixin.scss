// Defining colors ===========================================

$color-names  : '';
$light-colors : '';
$dark-colors  : '';

@mixin define-theme-color( $color-name, $light-color, $dark-color ) {

  @if ($color-names != "") and (index($color-names, $color-name) != false) {
  	@warn "Theme color $color-name is already defined";
	} @else {
		$color-names:  append($color-names,  $color-name,  comma);
		$light-colors: append($light-colors, $light-color, comma);
		$dark-colors:  append($dark-colors,  $dark-color,  comma);
	}

}



// Outer mixin, in which the content is duplicated with correct
// theme colors ===============================================

$current-color-schema: '';
@mixin theme-colors() {

	$current-color-schema: 'light';
	.light-theme & {
		@content;
	}

	$current-color-schema: 'dark';
	.dark-theme & {
		@content;
	}

}



// Function for retrieving correct color. Remember to use this
// inside the mixin defined above.
// FYI: This is actually just a lookup function ==============


@function theme-color( $color-name ){

	@if ($color-names == "") or (index($color-names, $color-name)) == false {
		@warn "Theme color \"" + $color-names + "   " + $color-name + "\" is not defined";
		@return "";
	} @else {

		$color-index: index($color-names, $color-name);

		@if ($current-color-schema == "light") {
			@return nth( $light-colors, $color-index);
		} @else {
			@return nth( $dark-colors,  $color-index);
		}

	}
}
